/// <reference types="node" />
/**
 *
 */
import * as $Util from '@alicloud/tea-util';
import OpenApi, * as $OpenApi from '@alicloud/openapi-client';
import { Readable } from 'stream';
import * as $tea from '@alicloud/tea-typescript';
export declare class ClassifyingRubbishRequest extends $tea.Model {
    imageURL?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClassifyingRubbishAdvanceRequest extends $tea.Model {
    imageURLObject?: Readable;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClassifyingRubbishResponseBody extends $tea.Model {
    data?: ClassifyingRubbishResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClassifyingRubbishResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: ClassifyingRubbishResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetectFruitsRequest extends $tea.Model {
    imageURL?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetectFruitsAdvanceRequest extends $tea.Model {
    imageURLObject?: Readable;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetectFruitsResponseBody extends $tea.Model {
    data?: DetectFruitsResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetectFruitsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DetectFruitsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetectImageElementsRequest extends $tea.Model {
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetectImageElementsAdvanceRequest extends $tea.Model {
    urlObject?: Readable;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetectImageElementsResponseBody extends $tea.Model {
    data?: DetectImageElementsResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetectImageElementsResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: DetectImageElementsResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EvaluateCertificateQualityRequest extends $tea.Model {
    imageURL?: string;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EvaluateCertificateQualityAdvanceRequest extends $tea.Model {
    imageURLObject?: Readable;
    type?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EvaluateCertificateQualityResponseBody extends $tea.Model {
    data?: EvaluateCertificateQualityResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EvaluateCertificateQualityResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: EvaluateCertificateQualityResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAsyncJobResultRequest extends $tea.Model {
    jobId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAsyncJobResultResponseBody extends $tea.Model {
    data?: GetAsyncJobResultResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAsyncJobResultResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: GetAsyncJobResultResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeFoodRequest extends $tea.Model {
    imageURL?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeFoodAdvanceRequest extends $tea.Model {
    imageURLObject?: Readable;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeFoodResponseBody extends $tea.Model {
    data?: RecognizeFoodResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeFoodResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RecognizeFoodResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeImageColorRequest extends $tea.Model {
    colorCount?: number;
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeImageColorAdvanceRequest extends $tea.Model {
    colorCount?: number;
    urlObject?: Readable;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeImageColorResponseBody extends $tea.Model {
    data?: RecognizeImageColorResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeImageColorResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RecognizeImageColorResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeImageStyleRequest extends $tea.Model {
    url?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeImageStyleAdvanceRequest extends $tea.Model {
    urlObject?: Readable;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeImageStyleResponseBody extends $tea.Model {
    data?: RecognizeImageStyleResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeImageStyleResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RecognizeImageStyleResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeLogoRequest extends $tea.Model {
    tasks?: RecognizeLogoRequestTasks[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeLogoAdvanceRequest extends $tea.Model {
    tasks?: RecognizeLogoAdvanceRequestTasks[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeLogoResponseBody extends $tea.Model {
    data?: RecognizeLogoResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeLogoResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RecognizeLogoResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeSceneRequest extends $tea.Model {
    imageURL?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeSceneAdvanceRequest extends $tea.Model {
    imageURLObject?: Readable;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeSceneResponseBody extends $tea.Model {
    data?: RecognizeSceneResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeSceneResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RecognizeSceneResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeVehicleTypeRequest extends $tea.Model {
    imageURL?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeVehicleTypeAdvanceRequest extends $tea.Model {
    imageURLObject?: Readable;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeVehicleTypeResponseBody extends $tea.Model {
    data?: RecognizeVehicleTypeResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeVehicleTypeResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: RecognizeVehicleTypeResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaggingAdImageRequest extends $tea.Model {
    imageURL?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaggingAdImageAdvanceRequest extends $tea.Model {
    imageURLObject?: Readable;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaggingAdImageResponseBody extends $tea.Model {
    data?: TaggingAdImageResponseBodyData;
    message?: string;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaggingAdImageResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: TaggingAdImageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaggingImageRequest extends $tea.Model {
    imageURL?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaggingImageAdvanceRequest extends $tea.Model {
    imageURLObject?: Readable;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaggingImageResponseBody extends $tea.Model {
    data?: TaggingImageResponseBodyData;
    requestId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaggingImageResponse extends $tea.Model {
    headers: {
        [key: string]: string;
    };
    statusCode: number;
    body: TaggingImageResponseBody;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClassifyingRubbishResponseBodyDataElements extends $tea.Model {
    category?: string;
    categoryScore?: number;
    rubbish?: string;
    rubbishScore?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class ClassifyingRubbishResponseBodyData extends $tea.Model {
    elements?: ClassifyingRubbishResponseBodyDataElements[];
    sensitive?: boolean;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetectFruitsResponseBodyDataElements extends $tea.Model {
    box?: number[];
    name?: string;
    score?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetectFruitsResponseBodyData extends $tea.Model {
    elements?: DetectFruitsResponseBodyDataElements[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetectImageElementsResponseBodyDataElements extends $tea.Model {
    height?: number;
    score?: number;
    type?: string;
    width?: number;
    x?: number;
    y?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class DetectImageElementsResponseBodyData extends $tea.Model {
    elements?: DetectImageElementsResponseBodyDataElements[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EvaluateCertificateQualityResponseBodyDataElements extends $tea.Model {
    pass?: string;
    score?: string;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class EvaluateCertificateQualityResponseBodyData extends $tea.Model {
    elements?: EvaluateCertificateQualityResponseBodyDataElements[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class GetAsyncJobResultResponseBodyData extends $tea.Model {
    errorCode?: string;
    errorMessage?: string;
    jobId?: string;
    result?: string;
    status?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeFoodResponseBodyDataTopFives extends $tea.Model {
    calorie?: string;
    category?: string;
    score?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeFoodResponseBodyData extends $tea.Model {
    topFives?: RecognizeFoodResponseBodyDataTopFives[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeImageColorResponseBodyDataColorTemplateList extends $tea.Model {
    color?: string;
    label?: string;
    percentage?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeImageColorResponseBodyData extends $tea.Model {
    colorTemplateList?: RecognizeImageColorResponseBodyDataColorTemplateList[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeImageStyleResponseBodyData extends $tea.Model {
    styles?: string[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeLogoRequestTasks extends $tea.Model {
    imageURL?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeLogoAdvanceRequestTasks extends $tea.Model {
    imageURLObject?: Readable;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeLogoResponseBodyDataElementsResultsLogosData extends $tea.Model {
    h?: number;
    name?: string;
    type?: string;
    w?: number;
    x?: number;
    y?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeLogoResponseBodyDataElementsResults extends $tea.Model {
    label?: string;
    logosData?: RecognizeLogoResponseBodyDataElementsResultsLogosData[];
    rate?: number;
    suggestion?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeLogoResponseBodyDataElements extends $tea.Model {
    imageURL?: string;
    results?: RecognizeLogoResponseBodyDataElementsResults[];
    taskId?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeLogoResponseBodyData extends $tea.Model {
    elements?: RecognizeLogoResponseBodyDataElements[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeSceneResponseBodyDataTags extends $tea.Model {
    confidence?: number;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeSceneResponseBodyData extends $tea.Model {
    tags?: RecognizeSceneResponseBodyDataTags[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeVehicleTypeResponseBodyDataElements extends $tea.Model {
    name?: string;
    score?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class RecognizeVehicleTypeResponseBodyData extends $tea.Model {
    elements?: RecognizeVehicleTypeResponseBodyDataElements[];
    threshold?: number;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaggingAdImageResponseBodyData extends $tea.Model {
    tagInfo?: {
        [key: string]: any;
    };
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaggingImageResponseBodyDataTags extends $tea.Model {
    confidence?: number;
    value?: string;
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export declare class TaggingImageResponseBodyData extends $tea.Model {
    tags?: TaggingImageResponseBodyDataTags[];
    static names(): {
        [key: string]: string;
    };
    static types(): {
        [key: string]: any;
    };
    constructor(map?: {
        [key: string]: any;
    });
}
export default class Client extends OpenApi {
    constructor(config: $OpenApi.Config);
    getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: {
        [key: string]: string;
    }, endpoint: string): string;
    classifyingRubbishWithOptions(request: ClassifyingRubbishRequest, runtime: $Util.RuntimeOptions): Promise<ClassifyingRubbishResponse>;
    classifyingRubbish(request: ClassifyingRubbishRequest): Promise<ClassifyingRubbishResponse>;
    classifyingRubbishAdvance(request: ClassifyingRubbishAdvanceRequest, runtime: $Util.RuntimeOptions): Promise<ClassifyingRubbishResponse>;
    detectFruitsWithOptions(request: DetectFruitsRequest, runtime: $Util.RuntimeOptions): Promise<DetectFruitsResponse>;
    detectFruits(request: DetectFruitsRequest): Promise<DetectFruitsResponse>;
    detectFruitsAdvance(request: DetectFruitsAdvanceRequest, runtime: $Util.RuntimeOptions): Promise<DetectFruitsResponse>;
    detectImageElementsWithOptions(request: DetectImageElementsRequest, runtime: $Util.RuntimeOptions): Promise<DetectImageElementsResponse>;
    detectImageElements(request: DetectImageElementsRequest): Promise<DetectImageElementsResponse>;
    detectImageElementsAdvance(request: DetectImageElementsAdvanceRequest, runtime: $Util.RuntimeOptions): Promise<DetectImageElementsResponse>;
    evaluateCertificateQualityWithOptions(request: EvaluateCertificateQualityRequest, runtime: $Util.RuntimeOptions): Promise<EvaluateCertificateQualityResponse>;
    evaluateCertificateQuality(request: EvaluateCertificateQualityRequest): Promise<EvaluateCertificateQualityResponse>;
    evaluateCertificateQualityAdvance(request: EvaluateCertificateQualityAdvanceRequest, runtime: $Util.RuntimeOptions): Promise<EvaluateCertificateQualityResponse>;
    getAsyncJobResultWithOptions(request: GetAsyncJobResultRequest, runtime: $Util.RuntimeOptions): Promise<GetAsyncJobResultResponse>;
    getAsyncJobResult(request: GetAsyncJobResultRequest): Promise<GetAsyncJobResultResponse>;
    recognizeFoodWithOptions(request: RecognizeFoodRequest, runtime: $Util.RuntimeOptions): Promise<RecognizeFoodResponse>;
    recognizeFood(request: RecognizeFoodRequest): Promise<RecognizeFoodResponse>;
    recognizeFoodAdvance(request: RecognizeFoodAdvanceRequest, runtime: $Util.RuntimeOptions): Promise<RecognizeFoodResponse>;
    recognizeImageColorWithOptions(request: RecognizeImageColorRequest, runtime: $Util.RuntimeOptions): Promise<RecognizeImageColorResponse>;
    recognizeImageColor(request: RecognizeImageColorRequest): Promise<RecognizeImageColorResponse>;
    recognizeImageColorAdvance(request: RecognizeImageColorAdvanceRequest, runtime: $Util.RuntimeOptions): Promise<RecognizeImageColorResponse>;
    recognizeImageStyleWithOptions(request: RecognizeImageStyleRequest, runtime: $Util.RuntimeOptions): Promise<RecognizeImageStyleResponse>;
    recognizeImageStyle(request: RecognizeImageStyleRequest): Promise<RecognizeImageStyleResponse>;
    recognizeImageStyleAdvance(request: RecognizeImageStyleAdvanceRequest, runtime: $Util.RuntimeOptions): Promise<RecognizeImageStyleResponse>;
    recognizeLogoWithOptions(request: RecognizeLogoRequest, runtime: $Util.RuntimeOptions): Promise<RecognizeLogoResponse>;
    recognizeLogo(request: RecognizeLogoRequest): Promise<RecognizeLogoResponse>;
    recognizeLogoAdvance(request: RecognizeLogoAdvanceRequest, runtime: $Util.RuntimeOptions): Promise<RecognizeLogoResponse>;
    recognizeSceneWithOptions(request: RecognizeSceneRequest, runtime: $Util.RuntimeOptions): Promise<RecognizeSceneResponse>;
    recognizeScene(request: RecognizeSceneRequest): Promise<RecognizeSceneResponse>;
    recognizeSceneAdvance(request: RecognizeSceneAdvanceRequest, runtime: $Util.RuntimeOptions): Promise<RecognizeSceneResponse>;
    recognizeVehicleTypeWithOptions(request: RecognizeVehicleTypeRequest, runtime: $Util.RuntimeOptions): Promise<RecognizeVehicleTypeResponse>;
    recognizeVehicleType(request: RecognizeVehicleTypeRequest): Promise<RecognizeVehicleTypeResponse>;
    recognizeVehicleTypeAdvance(request: RecognizeVehicleTypeAdvanceRequest, runtime: $Util.RuntimeOptions): Promise<RecognizeVehicleTypeResponse>;
    taggingAdImageWithOptions(request: TaggingAdImageRequest, runtime: $Util.RuntimeOptions): Promise<TaggingAdImageResponse>;
    taggingAdImage(request: TaggingAdImageRequest): Promise<TaggingAdImageResponse>;
    taggingAdImageAdvance(request: TaggingAdImageAdvanceRequest, runtime: $Util.RuntimeOptions): Promise<TaggingAdImageResponse>;
    taggingImageWithOptions(request: TaggingImageRequest, runtime: $Util.RuntimeOptions): Promise<TaggingImageResponse>;
    taggingImage(request: TaggingImageRequest): Promise<TaggingImageResponse>;
    taggingImageAdvance(request: TaggingImageAdvanceRequest, runtime: $Util.RuntimeOptions): Promise<TaggingImageResponse>;
}
